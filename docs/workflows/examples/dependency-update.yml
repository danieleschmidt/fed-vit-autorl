# Automated Dependency Update Workflow for Fed-ViT-AutoRL
#
# This workflow automatically updates dependencies, runs tests,
# and creates pull requests for review.
#
# MANUAL SETUP REQUIRED:
# 1. Copy this file to .github/workflows/dependency-update.yml
# 2. Enable Dependabot in repository settings
# 3. Configure auto-merge settings if desired
# 4. Set up branch protection rules

name: Dependency Update

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'  
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - minor
          - patch
      create_pr:
        description: 'Create pull request for updates'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # =============================================================================
  # Dependency Analysis
  # =============================================================================
  analyze-dependencies:
    name: Analyze Current Dependencies
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.update_summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-check-updates pip-tools safety pip-audit
          
      - name: Current dependency status
        run: |
          pip install -e ".[dev,simulation,edge]"
          pip list --outdated --format=json > current-outdated.json
          pip list --format=json > current-installed.json
          
      - name: Check for security updates
        continue-on-error: true
        run: |
          safety check --json --output security-check.json
          pip-audit --format=json --output pip-audit-check.json
          
      - name: Analyze update requirements
        id: check
        run: |
          # Count outdated packages
          OUTDATED_COUNT=$(cat current-outdated.json | jq length)
          
          if [ $OUTDATED_COUNT -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Found $OUTDATED_COUNT outdated packages"
            
            # Generate summary
            echo "update_summary<<EOF" >> $GITHUB_OUTPUT
            echo "## Dependency Update Summary" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "📦 **$OUTDATED_COUNT** packages can be updated:" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            cat current-outdated.json | jq -r '.[] | "- **\(.name)**: \(.version) → \(.latest_version)"' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "update_summary=All dependencies are up to date! ✅" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            current-outdated.json
            current-installed.json
            security-check.json
            pip-audit-check.json

  # =============================================================================
  # Security Updates (High Priority)
  # =============================================================================
  security-updates:
    name: Apply Security Updates
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.has_updates == 'true' && (github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all' || github.event.inputs.update_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety pip-audit
          
      - name: Identify security updates
        run: |
          # Install current dependencies
          pip install -e ".[dev,simulation,edge]"
          
          # Get security vulnerabilities
          safety check --json --output security-issues.json || true
          pip-audit --format=json --output audit-issues.json || true
          
          # Extract vulnerable packages
          if [ -f security-issues.json ]; then
            cat security-issues.json | jq -r '.vulnerabilities[]?.package_name' | sort -u > vulnerable-packages.txt || echo "" > vulnerable-packages.txt
          else
            echo "" > vulnerable-packages.txt
          fi
          
          if [ -f audit-issues.json ]; then
            cat audit-issues.json | jq -r '.vulnerabilities[]?.name' | sort -u >> vulnerable-packages.txt || true
          fi
          
          # Remove duplicates and empty lines
          sort vulnerable-packages.txt | uniq | grep -v '^$' > unique-vulnerable-packages.txt || echo "" > unique-vulnerable-packages.txt
          
      - name: Update vulnerable packages
        run: |
          if [ -s unique-vulnerable-packages.txt ]; then
            echo "Updating vulnerable packages:"
            cat unique-vulnerable-packages.txt
            
            # Update each vulnerable package to latest version
            while IFS= read -r package; do
              if [ -n "$package" ]; then
                echo "Updating $package"
                pip install --upgrade "$package"
              fi
            done < unique-vulnerable-packages.txt
            
            # Regenerate requirements files if they exist
            if [ -f requirements.txt ]; then
              pip freeze > requirements.txt
            fi
            
            echo "security_updates_applied=true" >> $GITHUB_ENV
          else
            echo "No vulnerable packages found"
            echo "security_updates_applied=false" >> $GITHUB_ENV
          fi
          
      - name: Run tests after security updates
        if: env.security_updates_applied == 'true'
        run: |
          pip install -e ".[dev]"
          pytest tests/unit/ tests/integration/ -v -m "not slow" --tb=short
          
      - name: Commit security updates
        if: env.security_updates_applied == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add -A
            git commit -m "security: update vulnerable dependencies

Automated security update to address known vulnerabilities.

$(cat unique-vulnerable-packages.txt | sed 's/^/- /')"
            
            echo "security_commit_created=true" >> $GITHUB_ENV
          fi
          
      - name: Upload security update results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-updates
          path: |
            security-issues.json
            audit-issues.json
            vulnerable-packages.txt
            unique-vulnerable-packages.txt

  # =============================================================================
  # Minor and Patch Updates
  # =============================================================================
  minor-patch-updates:
    name: Apply Minor and Patch Updates
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, security-updates]
    if: always() && needs.analyze-dependencies.outputs.has_updates == 'true' && (github.event.inputs.update_type == 'minor' || github.event.inputs.update_type == 'patch' || github.event.inputs.update_type == 'all' || github.event.inputs.update_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          
      - name: Update minor and patch versions
        run: |
          # Install current dependencies
          pip install -e ".[dev,simulation,edge]"
          
          # Get current outdated packages
          pip list --outdated --format=json > outdated.json
          
          # Filter for minor/patch updates (exclude major version changes)
          cat outdated.json | jq -r '.[] | select(
            (.version | split(".")[0]) == (.latest_version | split(".")[0])
          ) | .name' > minor-patch-packages.txt
          
          if [ -s minor-patch-packages.txt ]; then
            echo "Updating minor/patch versions:"
            cat minor-patch-packages.txt
            
            # Update packages
            while IFS= read -r package; do
              if [ -n "$package" ]; then
                echo "Updating $package"
                pip install --upgrade "$package"
              fi
            done < minor-patch-packages.txt
            
            echo "minor_patch_updates_applied=true" >> $GITHUB_ENV
          else
            echo "No minor/patch updates available"
            echo "minor_patch_updates_applied=false" >> $GITHUB_ENV
          fi
          
      - name: Run comprehensive tests
        if: env.minor_patch_updates_applied == 'true'
        run: |
          pip install -e ".[dev]"
          pytest tests/unit/ tests/integration/ -v --tb=short
          
      - name: Run benchmarks to check for regressions
        if: env.minor_patch_updates_applied == 'true'
        continue-on-error: true
        run: |
          pytest tests/benchmarks/ -v --benchmark-only --benchmark-json=benchmark-results.json
          
      - name: Commit minor/patch updates
        if: env.minor_patch_updates_applied == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add -A
            git commit -m "deps: update minor and patch versions

Automated dependency update for minor and patch versions.

Updated packages:
$(cat minor-patch-packages.txt | sed 's/^/- /')"
            
            echo "minor_patch_commit_created=true" >> $GITHUB_ENV
          fi

  # =============================================================================
  # Create Pull Request
  # =============================================================================
  create-update-pr:
    name: Create Update Pull Request
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, security-updates, minor-patch-updates]
    if: always() && (needs.security-updates.result == 'success' || needs.minor-patch-updates.result == 'success') && (github.event.inputs.create_pr == 'true' || github.event.inputs.create_pr == '')
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Create pull request branch
        run: |
          BRANCH_NAME="dependencies/automated-update-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git checkout -b "$BRANCH_NAME"
          
      - name: Generate PR body
        run: |
          cat > pr-body.md << 'EOF'
          ## 🤖 Automated Dependency Update
          
          This PR contains automated dependency updates generated by the dependency update workflow.
          
          ### Changes Made
          
          - ✅ Security vulnerabilities addressed
          - ✅ Minor and patch versions updated  
          - ✅ Tests passing
          - ✅ No major version changes
          
          ### Testing
          
          - [x] Unit tests passed
          - [x] Integration tests passed
          - [x] Security scans completed
          - [x] Performance benchmarks run
          
          ### Review Checklist
          
          - [ ] Review updated dependencies
          - [ ] Check for any breaking changes
          - [ ] Verify all tests pass
          - [ ] Confirm security improvements
          
          ### Auto-merge
          
          This PR is eligible for auto-merge if:
          - All status checks pass
          - No major version updates
          - Security scans show improvements
          
          ---
          
          *Generated by automated dependency update workflow*
          *Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*
          EOF
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "deps: automated dependency update $(date +%Y-%m-%d)"
          body-path: pr-body.md
          labels: |
            dependencies
            automated
            security
          assignees: ${{ github.actor }}
          reviewers: ${{ github.repository_owner }}

  # =============================================================================
  # Notification and Reporting
  # =============================================================================
  notify-results:
    name: Notify Update Results
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, security-updates, minor-patch-updates, create-update-pr]
    if: always()
    steps:
      - name: Generate notification
        run: |
          cat > notification.json << EOF
          {
            "summary": "${{ needs.analyze-dependencies.outputs.update_summary }}",
            "security_updates": "${{ needs.security-updates.result }}",
            "minor_patch_updates": "${{ needs.minor-patch-updates.result }}",
            "pr_created": "${{ needs.create-update-pr.result }}",
            "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
      - name: Send Slack notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🔄 Fed-ViT-AutoRL dependency update completed successfully!
            
            ${{ needs.analyze-dependencies.outputs.update_summary }}
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Fed-ViT-AutoRL dependency update failed!
            
            Please check the workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}