# Continuous Deployment Workflow for Fed-ViT-AutoRL
#
# This workflow handles automated deployments, releases, and publishing
# when tags are created or main branch is updated.
#
# MANUAL SETUP REQUIRED:
# 1. Copy this file to .github/workflows/cd.yml
# 2. Configure repository secrets (PYPI_API_TOKEN, etc.)
# 3. Set up deployment environments
# 4. Test with a pre-release tag

name: Continuous Deployment

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v1.0.0-alpha, etc.)
    branches:
      - main  # Also trigger on main branch for documentation
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      deploy_docs:
        description: 'Deploy documentation'
        required: false
        default: true
        type: boolean
      publish_package:
        description: 'Publish package to PyPI'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # =============================================================================
  # Version and Release Preparation
  # =============================================================================
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release notes
        id: notes
        run: |
          # Generate release notes from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Extract section for this version
            awk "/## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "release_notes=Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # Build and Test
  # =============================================================================
  build-and-test:
    name: Build and Test for Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - os: ubuntu-latest
            python-version: "3.11"
            run_full_tests: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,simulation,edge]"
          
      - name: Run comprehensive tests
        if: matrix.run_full_tests
        run: |
          pytest tests/ -v --cov=fed_vit_autorl --cov-report=xml --cov-report=term
          
      - name: Run basic tests
        if: "!matrix.run_full_tests"
        run: |
          pytest tests/unit/ tests/integration/ -v -m "not slow"
          
      - name: Build package
        run: |
          python -m pip install build
          python -m build
          
      - name: Upload build artifacts
        if: matrix.run_full_tests
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/

  # =============================================================================
  # Security and Quality Gates
  # =============================================================================
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run security checks
        run: |
          bandit -r fed_vit_autorl/ -ll
          safety check
          
      - name: Check for secrets
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # =============================================================================
  # Package Publishing
  # =============================================================================
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, security-gate]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.publish_package == 'true'
    environment: 
      name: pypi
      url: https://pypi.org/p/fed-vit-autorl
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          twine check dist/*
          
      - name: Publish to Test PyPI
        if: needs.prepare-release.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          
      - name: Publish to PyPI
        if: needs.prepare-release.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # =============================================================================
  # Docker Image Building and Publishing
  # =============================================================================
  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            terragonlabs/fed-vit-autorl
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          push: true
          tags: terragonlabs/fed-vit-autorl:dev-${{ needs.prepare-release.outputs.version }}
          platforms: linux/amd64,linux/arm64

  # =============================================================================
  # Documentation Deployment
  # =============================================================================
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event.inputs.deploy_docs == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          force_orphan: true

  # =============================================================================
  # GitHub Release Creation
  # =============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, security-gate, publish-pypi]
    if: startsWith(github.ref, 'refs/tags/v') && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: ./dist/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.release_notes }}
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease == 'true' }}
          files: |
            ./dist/*.whl
            ./dist/*.tar.gz
          generate_release_notes: true

  # =============================================================================
  # Post-deployment Tasks
  # =============================================================================
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-docs, build-docker]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: |
            🚀 Fed-ViT-AutoRL ${{ needs.prepare-release.outputs.version }} deployed successfully!
            
            📦 PyPI: https://pypi.org/project/fed-vit-autorl/
            🐳 Docker: https://hub.docker.com/r/terragonlabs/fed-vit-autorl
            📚 Docs: https://fed-vit-autorl.readthedocs.io
            🏷️ Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: |
            ❌ Fed-ViT-AutoRL deployment failed!
            
            Please check the deployment logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}